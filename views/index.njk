---
layout: root.njk
---

<cover-l centered=".middle">
  <!-- <div>h</div> -->
  <div class="middle">
    <!-- <form action="/api/login" target="self" method="POST" class="box invert" > -->
    <form name="login" class="box invert" >
      <stack-l >
        <stack-l space="var(--s-5)">
          <label for="username">Username</label>
          <input type="text" name="username">
        </stack-l >
        <stack-l space="var(--s-5)">
          <label >Password</label>
          <input type="password" name="password">
        </stack-l>
        <!-- <input type="submit" value="Login"> -->
        <button type="submit" value="Login">Login</button>
      </stack-l>
    </form>
  </div>
  <!-- <div>h</div> -->
</cover-l>

<script type="module" id="dyn-fetcher" src="/js/dynamic/fetcher.mjs"></script>
<script>
  function submitLogin() {
    // const form = 
    const inputs = document.forms["login"].querySelectorAll('input')
    const [ username, password, ...rest ] = [...inputs].map(inp => inp.value)

    const requestBody = { username, password }

    query('/api/login', requestBody)
      .then(resp => resp.code === 200 ? resp.body : Promise.reject(resp.body) )
      .then(body => { 
        console.log(body.message) 
        // TODO this force redirect seems to stifle the "save password" dialogue :/
        //  perhaps- we let the form do the target/redirect or whatever, so that it works with browser semantics, 
        //  but we still do this interruption to handle the actual login logic
        window.location = body.redirect
      } )
      .catch(body => { console.log("Error:", body.message) } )
  }

  // TODO Run this when the page is navigated to as if by "back" button. Or reached any way that doesn't execute the inline script since it's just loading whatever the browser remembers about this page.
  function checkLogin() {
    query('/api/login/check', {})
      .then(resp => resp.body)
      .then(({ loggedIn }) => {
        console.log("User is logged in: ", loggedIn)
        if (loggedIn) {
          // not using any redirect here? hm. Maybe send to App, which could then, maybe, recover some client state? SPA like or. something.
          // window.location = '/app/notes'
          // not auto-redirecting for now, in case user wants to log in as another user
        }
      })
  }

  // better way to 'wait' for import?
  document.querySelector('#dyn-fetcher').addEventListener('load', () => {
    checkLogin()
  })

  // listening to submit event let's us prevent the browser navigation and implicitly supports both clicking the submit button and hitting the enter key
  document.forms["login"].addEventListener('submit', (evt) => {
    evt.preventDefault()
    submitLogin()
  })

  // const loginButton = document.forms[0].querySelector('[type=submit]')
  // loginButton.addEventListener('click', submitLogin)
</script>